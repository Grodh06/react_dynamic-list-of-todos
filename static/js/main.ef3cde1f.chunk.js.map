{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectTodo","className","map","todo","completed","classNames","title","type","onClick","id","TodoFilter","selectFilter","selectSearch","useState","query","setQuery","onChange","event","target","value","placeholder","e","style","pointerEvents","get","url","delay","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","Loader","TodoModal","selectedTodo","onClose","user","setUser","isUserLoading","setIsUserLoading","useEffect","getUserFromServer","a","userId","selectedUser","error","Error","href","email","name","App","setTodos","setSelectedTodo","isLoading","setIsloading","selectedFilter","setSelectedFilter","appliedQuery","setAppliedQuery","getTodosFromServer","close","useCallback","visibleTodos","filter","item","i","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef3cde1f.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[]\n  selectTodo: (todo: Todo) => void\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, selectTodo }) => (\n  <table\n    data-cy=\"listOfTodos\"\n    className=\"table is-narrow is-fullwidth\"\n  >\n    <tbody>\n      {todos.map(todo => {\n        return (\n          <tr\n            className={todo.completed\n              ? ('has-background-success-light has-text-success')\n              : ('has-background-danger-light has-text-danger')}\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">\n              <span className=\"icon is-size-5\">\n                <i\n                  className={classNames('fas', {\n                    'fas fa-check-square': todo.completed,\n                    'fa-square-xmark': !todo.completed,\n                  })}\n                />\n              </span>\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              {todo.title}\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                className=\"button is-warning\"\n                type=\"button\"\n                onClick={() => {\n                  selectTodo(todo);\n                }}\n              >\n                {`Show : #${todo.id}`}\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { useState } from 'react';\n\ntype Props = {\n  selectFilter: (filter: string) => void\n  selectSearch: (searchText: string) => void\n};\n\nexport const TodoFilter: React.FC<Props> = ({ selectFilter, selectSearch }) => {\n  const [query, setQuery] = useState('');\n\n  const reset = () => {\n    setQuery('');\n    selectSearch('');\n  };\n\n  const handleQuery = (e: string) => {\n    setQuery(e);\n    selectSearch(e);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            onChange={(event) => selectFilter(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"filterByTitle\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => handleQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete has-text\"\n              onClick={reset}\n            />\n          </span>\n        )}\n\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  return wait(1000)\n    .then(() => fetch(BASE_URL + url))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => {\n  return get<Todo[]>('/todos');\n};\n\nexport const getUser = (id: number): Promise<User> => {\n  return get<User>(`/users/${id}`);\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* import { Todo } from '../../types/Todo'; */\nimport { useState, useEffect } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedTodo: Todo | null\n  onClose: () => void\n};\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isUserLoading, setIsUserLoading] = useState(false);\n\n  useEffect(() => {\n    const getUserFromServer = async () => {\n      if (selectedTodo) {\n        await getUser(selectedTodo.userId)\n          .then(selectedUser => {\n            setUser(selectedUser);\n          });\n        setIsUserLoading(true);\n      }\n    };\n\n    try {\n      getUserFromServer();\n    } catch (error) {\n      throw new Error('Failed to load user from server');\n    }\n  }, [user]);\n\n  return (\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\" />\n      {!isUserLoading\n        ? (\n          <Loader />\n        )\n        : (\n          <>\n            {!selectedTodo\n              ? ('no todo')\n              : (\n                <div className=\"modal-card\">\n                  <header className=\"modal-card-head\">\n                    <div className=\"modal-card-title has-text-weight-medium\">\n                      {`Todo: #${selectedTodo.id}`}\n                    </div>\n                    <a\n                      href=\"#close\"\n                      className=\"delete\"\n                      onClick={onClose}\n                    >\n                      Close\n                    </a>\n                  </header>\n\n                  <div className=\"modal-card-body\">\n                    <p className=\"block\">{selectedTodo.title}</p>\n\n                    <p className=\"block\">\n                      {selectedTodo.completed\n                        ? (<strong className=\"has-text-success\">Done</strong>)\n                        : (\n                          <strong\n                            className=\"has-text-danger\"\n                          >\n                            Planned\n                          </strong>\n                        )}\n                      {' by '}\n                      <a href={`mailto:${user?.email}`}>\n                        {user?.name}\n                      </a>\n                    </p>\n                  </div>\n                </div>\n              )}\n          </>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useState,\n} from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [isLoading, setIsloading] = useState(false);\n  const [selectedFilter, setSelectedFilter] = useState('all');\n  const [appliedQuery, setAppliedQuery] = useState('');\n\n  useEffect(() => {\n    async function getTodosFromServer() {\n      const res = await getTodos();\n\n      setTodos(res);\n      setIsloading(true);\n    }\n\n    try {\n      getTodosFromServer();\n    } catch (error) {\n      throw new Error('Failed to load todos from server');\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    setSelectedTodo(null);\n  }, []);\n\n  const selectTodo = useCallback((todo: Todo | null) => {\n    setSelectedTodo(todo);\n  }, []);\n\n  const visibleTodos = todos.filter(item => {\n    switch (selectedFilter) {\n      case 'active':\n        return !item.completed;\n\n      case 'completed':\n        return item.completed;\n\n      default:\n        return true;\n    }\n  }).filter(i => i.title.includes(appliedQuery));\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectFilter={setSelectedFilter}\n                selectSearch={setAppliedQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isLoading\n                ? (\n                  <Loader />\n                )\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectTodo={selectTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onClose={close}\n        />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport './general.scss';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}